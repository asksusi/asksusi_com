/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var /* istanbul ignore next */_ChatAppDispatcher = require('../dispatcher/ChatAppDispatcher'); /* istanbul ignore next */var _ChatAppDispatcher2 = _interopRequireDefault(_ChatAppDispatcher);
var /* istanbul ignore next */_ChatConstants = require('../constants/ChatConstants'); /* istanbul ignore next */var _ChatConstants2 = _interopRequireDefault(_ChatConstants);
var /* istanbul ignore next */_ChatMessageUtils = require('../utils/ChatMessageUtils'); /* istanbul ignore next */var ChatMessageUtils = _interopRequireWildcard(_ChatMessageUtils);
var /* istanbul ignore next */_events = require('events');
var /* istanbul ignore next */_ThreadStore = require('../stores/ThreadStore'); /* istanbul ignore next */var _ThreadStore2 = _interopRequireDefault(_ThreadStore);function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;} else {var newObj = {};if (obj != null) {for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];}}newObj.default = obj;return newObj;}}function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

let ActionTypes = /* istanbul ignore next */_ChatConstants2.default.ActionTypes;
let CHANGE_EVENT = 'change';

let _messages = {};

function _addMessages(rawMessages) {
  rawMessages.forEach(message => {
    if (!_messages[message.id]) {
      _messages[message.id] = ChatMessageUtils.convertRawMessage(
      message,
      /* istanbul ignore next */_ThreadStore2.default.getCurrentID());

    }
  });
}

function _markAllInThreadRead(threadID) {
  for (let id in _messages) {
    if (_messages[id].threadID === threadID) {
      _messages[id].isRead = true;
    }
  }
}

let MessageStore = /* istanbul ignore next */Object.assign({},
/* istanbul ignore next */_events.EventEmitter.prototype, {

  emitChange() {
    this.emit(CHANGE_EVENT);
  },

  /**
      * @param {function} callback
      */
  addChangeListener(callback) {
    this.on(CHANGE_EVENT, callback);
  },

  removeChangeListener(callback) {
    this.removeListener(CHANGE_EVENT, callback);
  },

  get(id) {
    return _messages[id];
  },

  getAll() {
    return _messages;

  },

  /**
      * @param {string} threadID
      */
  getAllForThread(threadID) {
    let threadMessages = [];
    for (let id in _messages) {
      if (_messages[id].threadID === threadID) {
        threadMessages.push(_messages[id]);
      }
    }
    threadMessages.sort((a, b) => {
      if (a.date < b.date) {
        return -1;
      } else if (a.date > b.date) {
        return 1;
      }
      return 0;
    });
    return threadMessages;
  },

  getAllForCurrentThread() {
    return this.getAllForThread( /* istanbul ignore next */_ThreadStore2.default.getCurrentID());
  } });



MessageStore.dispatchToken = /* istanbul ignore next */_ChatAppDispatcher2.default.register(action => {

  switch (action.type) {

    case ActionTypes.CLICK_THREAD:
      /* istanbul ignore next */_ChatAppDispatcher2.default.waitFor([/* istanbul ignore next */_ThreadStore2.default.dispatchToken]);
      _markAllInThreadRead( /* istanbul ignore next */_ThreadStore2.default.getCurrentID());
      MessageStore.emitChange();
      break;

    case ActionTypes.CREATE_MESSAGE:{
        let message = action.message;
        _messages[message.id] = message;
        MessageStore.emitChange();
        break;
      }

    case ActionTypes.RECEIVE_RAW_CREATED_MESSAGE:{/* istanbul ignore next */let
        rawMessage = action.rawMessage,tempMessageID = action.tempMessageID;
        delete _messages[tempMessageID];
        let message = ChatMessageUtils.convertRawMessage(rawMessage);
        console.log(message);
        _messages[message.id] = message;
        MessageStore.emitChange();
        break;
      }
    case ActionTypes.CREATE_SUSI_MESSAGE:{
        let message = action.message;
        _messages[message.id] = message;
        MessageStore.emitChange();
        break;
      }

    case ActionTypes.RECEIVE_SUSI_MESSAGE:{/* istanbul ignore next */let
        rawMessage = action.rawMessage,tempMessageID = action.tempMessageID;
        delete _messages[tempMessageID];
        let message = rawMessage;
        console.log(message);
        _messages[message.id] = message;
        MessageStore.emitChange();
        break;
      }
    default:
    // do nothing
  }

}); /* istanbul ignore next */exports.default =

MessageStore;