/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });
var /* istanbul ignore next */_ChatAppDispatcher = require('../dispatcher/ChatAppDispatcher'); /* istanbul ignore next */var _ChatAppDispatcher2 = _interopRequireDefault(_ChatAppDispatcher);
var /* istanbul ignore next */_ChatConstants = require('../constants/ChatConstants'); /* istanbul ignore next */var _ChatConstants2 = _interopRequireDefault(_ChatConstants);
var /* istanbul ignore next */_events = require('events');
var /* istanbul ignore next */_MessageStore = require('../stores/MessageStore'); /* istanbul ignore next */var _MessageStore2 = _interopRequireDefault(_MessageStore);
var /* istanbul ignore next */_ThreadStore = require('../stores/ThreadStore'); /* istanbul ignore next */var _ThreadStore2 = _interopRequireDefault(_ThreadStore);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

let ActionTypes = /* istanbul ignore next */_ChatConstants2.default.ActionTypes;
let CHANGE_EVENT = 'change';

let UnreadThreadStore = /* istanbul ignore next */Object.assign({},
/* istanbul ignore next */_events.EventEmitter.prototype, {

  emitChange() {
    this.emit(CHANGE_EVENT);
  },

  /**
      * @param {function} callback
      */
  addChangeListener(callback) {
    this.on(CHANGE_EVENT, callback);
  },

  /**
      * @param {function} callback
      */
  removeChangeListener(callback) {
    this.removeListener(CHANGE_EVENT, callback);
  },

  getCount() {
    let threads = /* istanbul ignore next */_ThreadStore2.default.getAll();
    let unreadCount = 0;
    for (let id in threads) {
      if (!threads[id].lastMessage.isRead) {
        unreadCount++;
      }
    }
    return unreadCount;
  } });



UnreadThreadStore.dispatchToken = /* istanbul ignore next */_ChatAppDispatcher2.default.register(action => {
  /* istanbul ignore next */_ChatAppDispatcher2.default.waitFor([
  /* istanbul ignore next */_ThreadStore2.default.dispatchToken,
  /* istanbul ignore next */_MessageStore2.default.dispatchToken]);


  switch (action.type) {

    case ActionTypes.CLICK_THREAD:
      UnreadThreadStore.emitChange();
      break;

    case ActionTypes.RECEIVE_RAW_MESSAGES:
      UnreadThreadStore.emitChange();
      break;

    default:
    // do nothing
  }
}); /* istanbul ignore next */exports.default =

UnreadThreadStore;