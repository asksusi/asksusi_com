/* istanbul ignore next */'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _jsxFileName = '/home/rishi/Documents/chat.susi.ai/src/components/ThreadSection.react.js';
var /* istanbul ignore next */_react = require('react'); /* istanbul ignore next */var _react2 = _interopRequireDefault(_react);
var /* istanbul ignore next */_ThreadListItem = require('../components/ThreadListItem.react'); /* istanbul ignore next */var _ThreadListItem2 = _interopRequireDefault(_ThreadListItem);
var /* istanbul ignore next */_ThreadStore = require('../stores/ThreadStore'); /* istanbul ignore next */var _ThreadStore2 = _interopRequireDefault(_ThreadStore);
var /* istanbul ignore next */_UnreadThreadStore = require('../stores/UnreadThreadStore'); /* istanbul ignore next */var _UnreadThreadStore2 = _interopRequireDefault(_UnreadThreadStore);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

function getStateFromStores() {
  return {
    threads: /* istanbul ignore next */_ThreadStore2.default.getAllChrono(),
    currentThreadID: /* istanbul ignore next */_ThreadStore2.default.getCurrentID(),
    unreadCount: /* istanbul ignore next */_UnreadThreadStore2.default.getCount() };

}

class ThreadSection extends /* istanbul ignore next */_react2.default.Component {

  constructor(props) {
    super(props);
    this.state = getStateFromStores();
  }

  componentDidMount() {
    /* istanbul ignore next */_ThreadStore2.default.addChangeListener(this._onChange.bind(this));
    /* istanbul ignore next */_UnreadThreadStore2.default.addChangeListener(this._onChange.bind(this));
  }

  componentWillUnmount() {
    /* istanbul ignore next */_ThreadStore2.default.removeChangeListener(this._onChange.bind(this));
    /* istanbul ignore next */_UnreadThreadStore2.default.removeChangeListener(this._onChange.bind(this));
  }

  render() {
    let threadListItems = this.state.threads.map(function (thread) {
      return (
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */_ThreadListItem2.default, /* istanbul ignore next */{
          key: thread.id,
          thread: thread,
          currentThreadID: this.state.currentThreadID, __source: { fileName: _jsxFileName, lineNumber: 35 }, __self: this }));


    }, this);
    let unread =
    this.state.unreadCount === 0 ?
    null :
    /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'span', /* istanbul ignore next */{ __source: { fileName: _jsxFileName, lineNumber: 45 }, __self: this }, /* istanbul ignore next */'Unread threads: ', this.state.unreadCount);
    return (
      /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'thread-section', __source: { fileName: _jsxFileName, lineNumber: 47 }, __self: this },
        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'div', /* istanbul ignore next */{ className: 'thread-count', __source: { fileName: _jsxFileName, lineNumber: 48 }, __self: this },
          unread),

        /* istanbul ignore next */_react2.default.createElement( /* istanbul ignore next */'ul', /* istanbul ignore next */{ className: 'thread-list', __source: { fileName: _jsxFileName, lineNumber: 51 }, __self: this },
          threadListItems)));



  }

  /**
     * Event handler for 'change' events coming from the stores
     */
  _onChange() {
    this.setState(getStateFromStores());
  }} /* istanbul ignore next */exports.default = ThreadSection;

;